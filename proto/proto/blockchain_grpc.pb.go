// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: blockchain.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlockchainService_GetBlocks_FullMethodName         = "/proto.BlockchainService/GetBlocks"
	BlockchainService_GetBlock_FullMethodName          = "/proto.BlockchainService/GetBlock"
	BlockchainService_GetStatus_FullMethodName         = "/proto.BlockchainService/GetStatus"
	BlockchainService_GetBalance_FullMethodName        = "/proto.BlockchainService/GetBalance"
	BlockchainService_GetMempool_FullMethodName        = "/proto.BlockchainService/GetMempool"
	BlockchainService_CreateTransaction_FullMethodName = "/proto.BlockchainService/CreateTransaction"
	BlockchainService_GetWallet_FullMethodName         = "/proto.BlockchainService/GetWallet"
	BlockchainService_Stake_FullMethodName             = "/proto.BlockchainService/Stake"
	BlockchainService_Unstake_FullMethodName           = "/proto.BlockchainService/Unstake"
	BlockchainService_GetStakingList_FullMethodName    = "/proto.BlockchainService/GetStakingList"
)

// BlockchainServiceClient is the client API for BlockchainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainServiceClient interface {
	// 블록 전체 조회
	GetBlocks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlocksResponse, error)
	// 특정 블록 조회
	GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// 블록체인 상태 조회
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	// 잔액 조회
	GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	// 멤풀 조회
	GetMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MempoolResponse, error)
	// 트랜잭션 생성
	CreateTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// 지갑 정보 조회
	GetWallet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WalletResponse, error)
	// 스테이킹 관련 기능들
	Stake(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StakeResponse, error)
	Unstake(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UnstakeResponse, error)
	GetStakingList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StakingListResponse, error)
}

type blockchainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainServiceClient(cc grpc.ClientConnInterface) BlockchainServiceClient {
	return &blockchainServiceClient{cc}
}

func (c *blockchainServiceClient) GetBlocks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlocksResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MempoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MempoolResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetMempool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) CreateTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, BlockchainService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetWallet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) Stake(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, BlockchainService_Stake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) Unstake(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UnstakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnstakeResponse)
	err := c.cc.Invoke(ctx, BlockchainService_Unstake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetStakingList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StakingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StakingListResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetStakingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServiceServer is the server API for BlockchainService service.
// All implementations must embed UnimplementedBlockchainServiceServer
// for forward compatibility.
type BlockchainServiceServer interface {
	// 블록 전체 조회
	GetBlocks(context.Context, *Empty) (*BlocksResponse, error)
	// 특정 블록 조회
	GetBlock(context.Context, *BlockRequest) (*BlockResponse, error)
	// 블록체인 상태 조회
	GetStatus(context.Context, *Empty) (*StatusResponse, error)
	// 잔액 조회
	GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	// 멤풀 조회
	GetMempool(context.Context, *Empty) (*MempoolResponse, error)
	// 트랜잭션 생성
	CreateTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// 지갑 정보 조회
	GetWallet(context.Context, *Empty) (*WalletResponse, error)
	// 스테이킹 관련 기능들
	Stake(context.Context, *Empty) (*StakeResponse, error)
	Unstake(context.Context, *Empty) (*UnstakeResponse, error)
	GetStakingList(context.Context, *Empty) (*StakingListResponse, error)
	mustEmbedUnimplementedBlockchainServiceServer()
}

// UnimplementedBlockchainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockchainServiceServer struct{}

func (UnimplementedBlockchainServiceServer) GetBlocks(context.Context, *Empty) (*BlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedBlockchainServiceServer) GetBlock(context.Context, *BlockRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedBlockchainServiceServer) GetStatus(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedBlockchainServiceServer) GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedBlockchainServiceServer) GetMempool(context.Context, *Empty) (*MempoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMempool not implemented")
}
func (UnimplementedBlockchainServiceServer) CreateTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedBlockchainServiceServer) GetWallet(context.Context, *Empty) (*WalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (UnimplementedBlockchainServiceServer) Stake(context.Context, *Empty) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stake not implemented")
}
func (UnimplementedBlockchainServiceServer) Unstake(context.Context, *Empty) (*UnstakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unstake not implemented")
}
func (UnimplementedBlockchainServiceServer) GetStakingList(context.Context, *Empty) (*StakingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakingList not implemented")
}
func (UnimplementedBlockchainServiceServer) mustEmbedUnimplementedBlockchainServiceServer() {}
func (UnimplementedBlockchainServiceServer) testEmbeddedByValue()                           {}

// UnsafeBlockchainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainServiceServer will
// result in compilation errors.
type UnsafeBlockchainServiceServer interface {
	mustEmbedUnimplementedBlockchainServiceServer()
}

func RegisterBlockchainServiceServer(s grpc.ServiceRegistrar, srv BlockchainServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlockchainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlockchainService_ServiceDesc, srv)
}

func _BlockchainService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetBlocks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetBlock(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetBalance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetMempool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetMempool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetMempool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetMempool(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).CreateTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetWallet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_Stake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).Stake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_Stake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).Stake(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_Unstake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).Unstake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_Unstake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).Unstake(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetStakingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetStakingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetStakingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetStakingList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainService_ServiceDesc is the grpc.ServiceDesc for BlockchainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BlockchainService",
	HandlerType: (*BlockchainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocks",
			Handler:    _BlockchainService_GetBlocks_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BlockchainService_GetBlock_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _BlockchainService_GetStatus_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _BlockchainService_GetBalance_Handler,
		},
		{
			MethodName: "GetMempool",
			Handler:    _BlockchainService_GetMempool_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _BlockchainService_CreateTransaction_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _BlockchainService_GetWallet_Handler,
		},
		{
			MethodName: "Stake",
			Handler:    _BlockchainService_Stake_Handler,
		},
		{
			MethodName: "Unstake",
			Handler:    _BlockchainService_Unstake_Handler,
		},
		{
			MethodName: "GetStakingList",
			Handler:    _BlockchainService_GetStakingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain.proto",
}
